Software Requirements Specification
For project-g2
Version 1.0
Prepared by
Taylor Hodson
Table of Contents
•	Revision History
•	1 Introduction
o	1.1 Document Purpose
o	1.2 Product Scope
o	1.3 Definitions, Acronyms and Abbreviations
o	1.4 References
o	1.5 Document Overview
•	2 Product Overview
o	2.1 Product Perspective
o	2.2 Product Functions
o	2.3 Product Constraints
o	2.4 User Characteristics
o	2.5 Assumptions and Dependencies
o	2.6 Apportioning of Requirements
•	3 Requirements
o	3.1 External Interfaces
	3.1.1 User Interfaces
	3.1.2 Hardware Interfaces
	3.1.3 Software Interfaces
o	3.2 Functional
o	3.3 Quality of Service
	3.3.1 Performance
	3.3.2 Security
	3.3.3 Reliability
	3.3.4 Availability
o	3.4 Compliance
o	3.5 Design and Implementation
	3.5.1 Installation
	3.5.2 Distribution
	3.5.3 Maintainability
	3.5.4 Reusability
	3.5.5 Portability
	3.5.6 Cost
	3.5.7 Deadline
	3.5.8 Proof of Concept
•	4 Verification
•	5 Appendixes
Revision History
Name	Date	Reason For Changes	Version
Taylor Hodson	6/30/25	First version	1.0
			
			
1. Introduction
This is an SRS document for the project-g2.  This project is a game of trivia made for class 2450 at UVU.  This document describes the scope of the project.
1.1 Document Purpose
The purpose of this document is to fulfill the requirements of the class and its intended recipient is the teacher.  This document in particular was made to be reviewed by peers as we continue the project.
1.2 Product Scope
The product is a trivia game.  This is the first version.  The trivia game will give the user multiple choice questions to answer as well as keep a score tally.  The total number of questions is 50.
1.3 Definitions, Acronyms and Abbreviations
1.4 References
https://taiga.luke-merrill.com/project/project-g2/backlog
https://docs.google.com/spreadsheets/d/1E8BiflJdZtr32lMwURZAU-tqDZDZ60ykgGHYlUxTroA/edit?gid=0#gid=0
1.5 Document Overview
The project includes the documents including the organization and assignments given to those working on the project.  These can be seen in Docs/project-launch.md
The meeting reports are included which are a document where the recorder has included the report when the team met to discuss assignments and other points of the project.
The tests to run the project are in pytest.ini
The program is run from src/main.py
The running code is included in the game folder
2. Product Overview
The program uses Python to run.  It is run from the command line and will eventually include a GUI which can hopefully be run from a phone.
2.1 Product Perspective
This is a trivia game intended to be used by a few people.  It comes from students creating a simple program for a class.  It is a self-contained product.  
2.2 Product Functions
•	Display trivia Questions
•	Allow multiple choice answers
•	Keep score counter
•	Simple command interface
•	Modular codebase
2.3 Product Constraints
•	Only a simple program
•	No multiplayer
•	Scores are not kept between sessions
2.4 User Characteristics
•	app.py
•	main.py
•	cli.py
•	game_engine.py
•	question.py
•	test_Question.py
•	test_cli.py
•	test_game_engine.py
2.5 Assumptions and Dependencies
Assume user have access to a command line and internet to download the project off GitHub and run the program.
2.6 Apportioning of Requirements
Python 3.8
3. Requirements
Python 3.8
Inputs:
•	command line inputs for answering each question.  Acceptable inputs are a b c d or 1 2 3 4 and quit
3.1 External Interfaces
This subsection defines all the inputs into and outputs requirements of the software system. Each interface defined may include the following content:
•	Name of item
•	Source of input or destination of output
•	Valid range, accuracy, and/or tolerance
•	Units of measure
•	Timing
•	Relationships to other inputs/outputs
•	Screen formats/organization
•	Window formats/organization
•	Data formats
•	Command formats
•	End messages
3.1.1 User interfaces
Define the software components for which a user interface is needed. Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., help) that will appear on every screen, keyboard shortcuts, error message display standards, and so on. Details of the user interface design should be documented in a separate user interface specification.
Could be further divided into Usability and Convenience requirements.
3.1.2 Hardware interfaces
Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware, and communication protocols to be used.
3.1.3 Software interfaces
Describe the connections between this product and other specific software components (name and version), including databases, operating systems, tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Refer to documents that describe detailed application programming interface protocols. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.
3.2 Functional
This section specifies the requirements of functional effects that the software-to-be is to have on its environment.
3.3 Quality of Service
This section states additional, quality-related property requirements that the functional effects of the software should present.
3.3.1 Performance
If there are performance requirements for the product under various circumstances, state them here and explain their rationale, to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional requirements or features.
3.3.2 Security
Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created by the product. Define any user identity authentication requirements. Refer to any external policies or regulations containing security issues that affect the product. Define any security or privacy certifications that must be satisfied.
3.3.3 Reliability
Specify the factors required to establish the required reliability of the software system at time of delivery.
3.3.4 Availability
Specify the factors required to guarantee a defined availability level for the entire system such as checkpoint, recovery, and restart.
3.4 Compliance
Specify the requirements derived from existing standards or regulations, including:
•	Report format
•	Data naming
•	Accounting procedures
•	Audit tracing
For example, this could specify the requirement for software to trace processing activity. Such traces are needed for some applications to meet minimum regulatory or financial standards. An audit trace requirement may, for example, state that all changes to a payroll database shall be recorded in a trace file with before and after values.
3.5 Design and Implementation
3.5.1 Installation
Constraints to ensure that the software-to-be will run smoothly on the target implementation platform.
3.5.2 Distribution
Constraints on software components to fit the geographically distributed structure of the host organization, the distribution of data to be processed, or the distribution of devices to be controlled.
3.5.3 Maintainability
Specify attributes of software that relate to the ease of maintenance of the software itself. These may include requirements for certain modularity, interfaces, or complexity limitation. Requirements should not be placed here just because they are thought to be good design practices.
3.5.4 Reusability
3.5.5 Portability
Specify attributes of software that relate to the ease of porting the software to other host machines and/or operating systems.
3.5.6 Cost
Specify monetary cost of the software product.
3.5.7 Deadline
Specify schedule for delivery of the software product.
3.5.8 Proof of Concept
4. Verification
This section provides the verification approaches and methods planned to qualify the software. The information items for verification are recommended to be given in a parallel manner with the requirement items in Section 3. The purpose of the verification process is to provide objective evidence that a system or system element fulfills its specified requirements and characteristics.
5. Appendixes

